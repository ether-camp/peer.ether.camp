# HOCON (Human-Optimized Config Object Notation) syntax. For details refer to:
# https://github.com/typesafehub/config/blob/master/HOCON.md
# Refer to SystemProperties class documentation regarding
# configuration sources and their merge order

# specify if the mechanism
# to discover more and more
# peers and check the already
# discovered peers is on
peer.discovery = {

    # if peer discovery is off
    # the peer window will show
    # only what retrieved by active
    # peer [true/false]
    enabled = true

    # number of workers that
    # tastes the peers for being
    # online [1..10]
    workers = 3

    # List of the peers to start
    # the search of the online peers
    # values: [ip:port, ip:port, ip:port ...]
    ip.list = [
        //        "peer-1.ether.camp:30301"
        //        "peer-3.ether.camp:30301"
        //        "52.16.188.185:30303"
        //        "poc-7.ethdev.com:30303",
        //        "185.43.109.23:30303"
        "54.94.239.50:30303",
        "52.74.57.123:30303",
        "52.16.188.185:30303",
    ]

    # indicates if the discovered nodes and their reputations
    # are stored in DB and persised between sessions
    persist = true
}

peer {
    # Boot node list
    active = [
        //        {
        //            ip = localhost
        //            port = 20301
        //            nodeId = ae89993dfc1b007af9a084c3c22efe56f29afd112d803c31a542b68ee6d64bfb01ff01c7e02443d40610617b5abd367034fcee4761fe1955100f7c18ca5f3a23
        //        }
//        {
//            # go frontier-2
//            ip = frontier-2.ether.camp
//            port = 30303
//            nodeId = 69bfa214a36e0e4d9fe3437e2cd5450143133d46bb28cfdfe65b9215dafee080c7ac9b275638945d77806f2bfaebedd35b922b70fe1baab0e91165cfabbc5299
//        }
//
//        {
//            # go frontier-3
//            ip = frontier-3.ether.camp
//            port = 30303
//            nodeId = fec03476503431ebb1ea610c90330b6925f3b4ce04e1106b9c6622b8cc1a59f2a24db6c80f45e6f1d29d430d72a63292cfc75cf4b75d795edaefa2aa75da4e63
//        }
//
//        {
//            # go frontier-4
//            ip = frontier-4.ether.camp
//            port = 30303
//            nodeId = 77e6a5959a5e0529031f1783709a5d7965c579588c702bf8811fe2ac5bca6511833eae83cab0ff08c9681e4111b75a9381932dd20852eaf863a5e5bb39bacd31
//        }
    ]

    # The protocols supported by peer
    //    capabilities = [eth, shh, bzz]
    capabilities = [eth]

    # Local network adapter IP to which
    # the discovery UDP socket is bound
    bind.ip = 192.168.1.3

    # Peer for server to listen for incoming
    # connections
    listen.port = 60000

    # connection timeout for trying to
    # connect to a peer [seconds]
    connection.timeout = 20

    # the parameter specifies how much
    # time we will wait for a message
    # to come before closing the channel
    channel.read.timeout = 30

    # Private key of the peer
    # derived nodeId = a560c55a0a5b5d137c638eb6973812f431974e4398c6644fa0c19181954fab530bb2a1e2c4eec7cc855f6bab9193ea41d6cf0bf2b8b41ed6b8b9e09c072a1e5a
    //    privateKey = ba43d10d069f0c41a8914849c1abeeac2a681b21ae9b60a6a2362c06e6eb1bc8
    # derived nodeId = deadbeea2250b3efb9e6268451e74bdbdc5632a1a03a0f5b626f59150ff772ac287e122531b5e8d55ff10cb541bbc8abf5def6bcbfa31cf5923ca3c3d783d312
    privateKey = d3a4a240b107ab443d46187306d0b947ce3d6b6ed95aead8c4941afcebde43d2
    //        privateKey = e0ad65f2ef4a64bd75ad1f7695a03b5c862fc7f1294a859526563a78614450294eaf74711ac378f63d4860dadbe6996e29f60ce751e0263db3610cac181fae68
    //    privateKey = 000005f2ef4a64bd75ad1f7695a03b5c862fc7f1294a859526563a78614450294eaf74711ac378f63d4860dadbe6996e29f60ce751e0263db3610cac181fae68
}


database {
    # place to save physical storage files
    dir = database

    # every time the application starts
    # the existing database will be
    # destroyed and all the data will be
    # downloaded from peers again [true/false]
    reset = false
}

# structured trace
# is the trace being
# collected in the
# form of objects and
# exposed to the user
# in json or any other
# convenient form.
//vm.structured {
//    trace = true
//    dir = vmtrace
//    compressed = true
//    initStorageLimit = 10000
//
//    # enables storage disctionary db recording
//    # see the org.ehereum.db.StorageDisctionary class for details
//    storage.dictionary.enabled = true
//    storage.dictionary.dump = true
//}


# Load the blocks
# from a rlp lines
# file and not for
# the net
//blocks.loader="frontier-blocks-+210k.dmp"
blocks.loader=""

# eth sync process
sync {

    # block chain synchronization
    # can be: [true/false]
    enabled = true

    # maximum blocks hashes to ask.
    # sending GET_BLOCK_HASHES msg
    # we specify number of block we want
    # to get, recomendec value [1..1000]
    # Default: unlimited
    max.hashes.ask = 10000

    # maximum blocks to ask,
    # when downloading the chain
    # sequenteally sending GET_BLOCKS msg
    # we specify number of blocks we want
    # to get, recomendec value [1..120]
    max.blocks.ask = 100

    # minimal peers count
    # used in sync process
    # sync may use more peers
    # than this value
    # but always trying to get
    # at least this number from discovery
    peer.count = 10
}

